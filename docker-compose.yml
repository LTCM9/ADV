version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: iapd-postgres
    environment:
      POSTGRES_DB: iapd
      POSTGRES_USER: iapdadmin
      POSTGRES_PASSWORD: AdvPwd#2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iapdadmin -d iapd"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - iapd-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: iapd-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - iapd-network

  # API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: iapd-api
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGDATABASE=iapd
      - PGUSER=iapdadmin
      - PGPASSWORD=AdvPwd#2025
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_DEBUG=true
      - LOG_LEVEL=DEBUG
    ports:
      - "8000:8000"
    volumes:
      - ./api:/app/backend/api
      - ./scripts:/app/backend/scripts
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - iapd-network
    command: ["python", "/app/backend/api/app.py"]

  # Frontend Development Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend-builder
    container_name: iapd-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/frontend/src
      - ./public:/app/frontend/public
      - ./package.json:/app/frontend/package.json
      - ./vite.config.ts:/app/frontend/vite.config.ts
    depends_on:
      - api
    networks:
      - iapd-network
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]

  # Data Pipeline Worker
  pipeline:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend-builder
    container_name: iapd-pipeline
    environment:
      - PGHOST=postgres
      - PGPORT=5432
      - PGDATABASE=iapd
      - PGUSER=iapdadmin
      - PGPASSWORD=AdvPwd#2025
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - ./scripts:/app/backend/scripts
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - iapd-network
    command: ["python", "/app/backend/scripts/run_pipeline.py"]

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: iapd-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - iapd-network
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: iapd-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - iapd-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: iapd-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - iapd-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  iapd-network:
    driver: bridge 